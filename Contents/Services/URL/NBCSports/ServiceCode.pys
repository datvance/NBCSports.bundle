import common

PLAYER_URL = "http://vplayer.nbcsports.com/p/BxmELC/nbcsports/select/media/"
SMIL_URL = "http://link.theplatform.com/s/BxmELC/media/%s?format=SMIL"
SMIL_NAMESPACE = {'a': 'http://www.w3.org/2005/SMIL21/Language'}


####################################################################################################
def MetadataObjectForURL(url):

    common.log('MetadataObjectForURL(' + url + ')')

    if url.startswith("http://www.nbcsports.com"):

        video_details = GetVideoDetails(url)

        if len(video_details) > 0:

            return VideoClipObject(
                    title=video_details["title"],
                    summary=video_details["summary"],
                    thumb=video_details["thumb"],
                    duration=video_details["duration"],
                    originally_available_at=video_details["date"]
            )


####################################################################################################
def MediaObjectsForURL(url):

    common.log('MediaObjectsForURL(' + url + ')')

    if url.startswith("http://www.nbcsports.com"):

        return [
            MediaObject(
                parts=[
                    PartObject(
                        key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                    )
                ],
                video_resolution='720',
                aspect_ratio='1.78',
                audio_channels=2,
                optimized_for_streaming=True
            )
        ]


####################################################################################################
@indirect
def PlayVideo(url):

    video_details = GetVideoDetails(url)

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(video_details['src']))


####################################################################################################
# gets the mediaID (i.e. video_hash)
# parses the smil file for video details
def GetVideoDetails(url):

    common.log("GetVideoDetails(" + url + ")")

    # get the mediaID (or video hash) from the page's iframe src attribute, so that we can get the smil file
    html = HTML.ElementFromURL(url)
    iframe_src = html.xpath('//iframe[@id="vod-player"]/@src')[0]
    video_hash = iframe_src.replace(PLAYER_URL, '').split('?')[0]
    common.log("video_hash: %s" % video_hash)

    smil = XML.ElementFromURL(SMIL_URL % video_hash)

    video_element = smil.xpath('//a:video', namespaces=SMIL_NAMESPACE)
    common.log("video element length: %d" % len(video_element))

    if video_element is None or len(video_element) != 1:
        return {}

    # get a thumbnail url from twitter meta tag
    thumb = html.xpath('//meta[@name="twitter:image:src"]/@content')[0]

    # get publish date
    pub_time = html.xpath('//meta[@property="article:published_time"]/@content')[0]
    pub_date = Datetime.ParseDate(pub_time).date()

    video_info = video_element[0]

    summary = video_info.get('abstract')
    duration = int(video_info.get('dur').strip('ms'))
    # src should be a m3u8 playlist
    src = video_info.get('src')
    title = video_info.get('title')

    details = {'duration': duration, 'src': src, 'summary': summary, 'thumb': thumb, 'title': title, 'date': pub_date}

    common.log(str(details))

    return details

